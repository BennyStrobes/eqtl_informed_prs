import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from itertools import islice
import glob
import json
import pdb
import sys
import os


#########################
# Code generated by Karl Tayeb (with minor adjustments)
# https://github.com/karltayeb/coloc-finemap/blob/master/workflow/scripts/get_gtex_associations.py
##########################

def get_gene_id_and_type(gene_info):
    gene_id = ''
    gene_type = ''
    for ele in gene_info:
        if ele.split(' "')[0] == 'gene_id':
            if gene_id != '':
                print('assumption eroror')
                pdb.set_trace()
            gene_id = ele.split(' "')[1].split('"')[0]
        elif ele.split(' "')[0] == ' gene_type':
            if gene_type != '':
                print('assumtpione oeorroro')
                pdb.set_trace()
            gene_type = ele.split(' "')[1].split('"')[0]
    if gene_id == '' or gene_type == '':
        print('never made it')
        pdb.set_trace()
    return gene_id, gene_type

def get_protein_coding_autosomal_genes(gene_info_file):
    valid_chromosomes = {}
    for chrom_num in range(1,23):
        chrom_string = 'chr' + str(chrom_num)
        valid_chromosomes[chrom_string] = 1

    f = open(gene_info_file)
    pc_genes = {}
    for line in f:
        line = line.rstrip()
        data = line.split('\t')
        if line.startswith('##'):
            continue
        # Remove non-autosomal genes
        if data[0] not in valid_chromosomes:
            continue
        gene_info = data[8].split(';')
        gene_id, gene_type = get_gene_id_and_type(gene_info)
        if gene_type == 'protein_coding':
            pc_genes[gene_id] = data[0]
    f.close()
    return pc_genes

def get_karls_genes(dir_root):
    karls_genes = {}
    for chrom_num in range(1,23):
        chrom_root = dir_root + 'chr' + str(chrom_num) + '/'
        for dir_name in os.listdir(chrom_root):
            if dir_name.startswith('ENSG') == False:
                continue
            if dir_name.endswith('.tar.gz'):
                continue
            gene_dir = chrom_root + dir_name + '/'
            variant_report_file = gene_dir + dir_name + '.cafeh_genotype_ss.variant_report'
            if os.path.exists(variant_report_file):
                karls_genes[dir_name] = 1
    return karls_genes

cafeh_gene_list = sys.argv[1]
gene_info_file = sys.argv[2]

association_indices = {
        x.split('/')[-1].split('.')[0]: json.load(open(x, 'r'))
        for x in glob.glob('/work-zfs/abattle4/karl/cosie_analysis/output/GTEx/index/*.index')
    }


protein_coding_genes = get_protein_coding_autosomal_genes(gene_info_file)

# for debugging purposes
#karls_genes = get_karls_genes('/work-zfs/abattle4/karl/cosie_analysis/output/GTEx/')

gene_tissue_map = {}
for tissue in association_indices:
    for gene in association_indices[tissue]:
        if gene == 'gene_id':
            continue
        if gene in gene_tissue_map:
            gene_tissue_map[gene].append(tissue)
        else:
            gene_tissue_map[gene] = [tissue]

def get_associations(test_gene):
    results = {}
    for test_tissue in gene_tissue_map[test_gene]:
        lines = []
        with open(
            '/work-zfs/abattle4/lab_data/GTEx_v8/ciseQTL/'
            'GTEx_Analysis_v8_eQTL_all_associations/{}.allpairs.txt'.format(
                test_tissue), 'r') as f:
            f.seek(association_indices[test_tissue][test_gene])
            last_gene = ''
            for line in f:
                gene = line.split('\t')[0]
                if gene != test_gene and len(lines) > 1:
                    break
                else:
                    lines.append(line)
                    last_gene = gene
        results[test_tissue] = pd.DataFrame([x.strip().split('\t') for x in lines])

    results = pd.concat(results)
    results = results.rename({
        0: 'gene_id',
        1: 'variant_id',
        2: 'tss_distance',
        3: 'ma_samples',
        4: 'ma_count',
        5: 'maf',
        6: 'pval_nominal',
        7: 'slope',
        8: 'slope_se'
    }, axis='columns')

    results.slope = results.slope.astype(float)
    results.slope_se = results.slope_se.astype(float)

    results = results[results.maf.astype(float) > 0.01]
    results.index.levels[0].name = 'tissue'
    results.reset_index(inplace=True)
    results.drop('level_1', axis=1, inplace=True)
    return results



t = open(cafeh_gene_list,'w')
t.write('gene_name\tchrom_num\tactive_tissues\n')
for test_gene in sorted(gene_tissue_map.keys()):
    test_gene = test_gene.encode('ascii')
    if test_gene not in protein_coding_genes:
        continue
    t.write(test_gene + '\t' + protein_coding_genes[test_gene] + '\t')
    tissues = sorted(np.asarray(gene_tissue_map[test_gene]))
    t.write(';'.join(tissues) + '\n')

t.close()
